package Vistas;

import Main.BD;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Carlos Moyano
 */

public class Facturaci처n extends javax.swing.JFrame {

    DefaultTableModel modeloTabla;
    List<Integer> cantidades = new ArrayList<>();

    public Facturaci처n() 
    {
        initComponents();
        
        modeloTabla = (DefaultTableModel) tblFact.getModel();
        modeloTabla.setRowCount(0);
        
        txtFechaFac.setText(java.time.LocalDate.now().toString());
        
        exitTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitTxtMouseClicked(evt);
            }
        });
        
        if (Login.usuarioLogueado != null) {
            txtResponFac.setText(Login.usuarioLogueado);
            txtResponFac.setEditable(false);
        }
        
    }
    
    private void actualizarTotalFinal() 
    {
        double totalFinal = 0;
        double totalSubtotal = 0;
        double totalIVA = 0;

        for (int i = 0; i < modeloTabla.getRowCount(); i++) 
        {
            totalSubtotal += Double.parseDouble(modeloTabla.getValueAt(i, 3).toString()); // Columna Subtotal
            totalIVA += Double.parseDouble(modeloTabla.getValueAt(i, 4).toString());       // Columna IVA
            totalFinal += Double.parseDouble(modeloTabla.getValueAt(i, 5).toString());     // Columna Total
        }

        txtTotalF2.setText(String.format("%.2f", totalSubtotal));
        txtTotalIVA.setText(String.format("%.2f", totalIVA));
        txtTotalF.setText(String.format("%.2f", totalFinal));
    }


    private int obtenerClienteId(Connection con, String cedula) throws SQLException 
    {
        String sql = "SELECT cli_id FROM MUE_CLIENTES WHERE cli_cedula = ?";
        PreparedStatement ps = con.prepareStatement(sql);
        ps.setString(1, cedula);
        ResultSet rs = ps.executeQuery();
        if (rs.next()) return rs.getInt("cli_id");
        throw new SQLException("Cliente no encontrado");
    }

    private int obtenerUsuarioId(Connection con, String usuario) throws SQLException 
    {
        String sql = "SELECT emp_id FROM MUE_EMPLEADOS WHERE LOWER(emp_usuario) = LOWER(?)";
        PreparedStatement ps = con.prepareStatement(sql);
        ps.setString(1, usuario);
        ResultSet rs = ps.executeQuery();
        if (rs.next()) return rs.getInt("emp_id");
        throw new SQLException("Empleado no encontrado");
    }

    private int obtenerProductoId(Connection con, String nombreProd) throws SQLException 
    {
        String sql = "SELECT prod_id FROM MUE_PRODUCTOS WHERE LOWER(prod_nombre) = LOWER(?)";
        PreparedStatement ps = con.prepareStatement(sql);
        ps.setString(1, nombreProd);
        ResultSet rs = ps.executeQuery();
        if (rs.next()) return rs.getInt("prod_id");
        throw new SQLException("Producto no encontrado");
    }
    
    private void cargarFacturas() 
    {
        DefaultTableModel modelo = (DefaultTableModel) tblFact.getModel();
        modelo.setRowCount(0); // Limpiar tabla

        try (Connection con = BD.conectar()) 
        {
            String sql = "SELECT fac_numero, TO_CHAR(fac_fecha, 'YYYY-MM-DD') AS fecha, fac_valor_total, fac_estado FROM MUE_FACTURAS ORDER BY fac_fecha DESC";
            PreparedStatement ps = con.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) 
            {
                String numero = rs.getString("fac_numero");
                String fecha = rs.getString("fecha");
                double total = rs.getDouble("fac_valor_total");
                String estado = rs.getString("fac_estado").equals("A") ? "Activa" : "Anulada";

                modelo.addRow(new Object[]{numero, fecha, total, estado});
            }
        } 
        catch (Exception e) 
        {
            JOptionPane.showMessageDialog(null, "Error al cargar facturas: " + e.getMessage());
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblMateriales = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lblMateriales1 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        lblCrearProd5 = new javax.swing.JLabel();
        txtNumFac = new javax.swing.JTextField();
        txtCedRuc = new javax.swing.JTextField();
        lblCrearProd9 = new javax.swing.JLabel();
        txtResponFac = new javax.swing.JTextField();
        txtProductoFact = new javax.swing.JTextField();
        lblCrearProd8 = new javax.swing.JLabel();
        lblCrearProd11 = new javax.swing.JLabel();
        btnEliminarProd = new javax.swing.JButton();
        btnAgregarProd1 = new javax.swing.JButton();
        lblCrearProd12 = new javax.swing.JLabel();
        txtFechaFac = new javax.swing.JTextField();
        btnAnularfactura = new javax.swing.JButton();
        btnBuscarFactura = new javax.swing.JButton();
        lblCrearProd10 = new javax.swing.JLabel();
        cmbFact = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        lblCrearProd6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFact = new javax.swing.JTable();
        lblCrearProd7 = new javax.swing.JLabel();
        txtTotalF = new javax.swing.JTextField();
        btnValidarStock = new javax.swing.JButton();
        btnGuardarFact = new javax.swing.JButton();
        lblCrearProd13 = new javax.swing.JLabel();
        lblCrearProd14 = new javax.swing.JLabel();
        txtTotalIVA = new javax.swing.JTextField();
        txtTotalF2 = new javax.swing.JTextField();
        exitBtn1 = new javax.swing.JPanel();
        exitTxt1 = new javax.swing.JLabel();
        exitBtn = new javax.swing.JPanel();
        exitTxt = new javax.swing.JLabel();

        lblMateriales.setFont(new java.awt.Font("Roboto Black", 1, 24)); // NOI18N
        lblMateriales.setText("Clientes");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setToolTipText("");
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblMateriales1.setFont(new java.awt.Font("Roboto Black", 1, 24)); // NOI18N
        lblMateriales1.setText("Facturaci처n");
        jPanel1.add(lblMateriales1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, -1, -1));

        jSeparator3.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 100, 680, 20));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblCrearProd5.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        lblCrearProd5.setText("Responsable:");
        jPanel2.add(lblCrearProd5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 100, -1));

        txtNumFac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumFacActionPerformed(evt);
            }
        });
        jPanel2.add(txtNumFac, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 180, -1));
        jPanel2.add(txtCedRuc, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 40, 180, -1));

        lblCrearProd9.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        lblCrearProd9.setText("CI / RUC:");
        jPanel2.add(lblCrearProd9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 70, -1));
        jPanel2.add(txtResponFac, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 130, 220, -1));
        jPanel2.add(txtProductoFact, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 160, 220, -1));

        lblCrearProd8.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        lblCrearProd8.setText("Producto:");
        jPanel2.add(lblCrearProd8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 100, -1));

        lblCrearProd11.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        lblCrearProd11.setText("N째 Factura:");
        jPanel2.add(lblCrearProd11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 140, -1));

        btnEliminarProd.setBackground(new java.awt.Color(255, 153, 0));
        btnEliminarProd.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnEliminarProd.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminarProd.setText("ELIMINAR");
        btnEliminarProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarProdActionPerformed(evt);
            }
        });
        jPanel2.add(btnEliminarProd, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 190, 110, -1));

        btnAgregarProd1.setBackground(new java.awt.Color(255, 153, 0));
        btnAgregarProd1.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnAgregarProd1.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregarProd1.setText("AGREGAR");
        btnAgregarProd1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarProd1ActionPerformed(evt);
            }
        });
        jPanel2.add(btnAgregarProd1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 190, 110, -1));

        lblCrearProd12.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        lblCrearProd12.setText("Fecha:");
        jPanel2.add(lblCrearProd12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 50, -1));

        txtFechaFac.setEditable(false);
        jPanel2.add(txtFechaFac, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 100, 150, -1));

        btnAnularfactura.setBackground(new java.awt.Color(255, 153, 0));
        btnAnularfactura.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnAnularfactura.setForeground(new java.awt.Color(255, 255, 255));
        btnAnularfactura.setText("ANULAR FACTURA");
        btnAnularfactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnularfacturaActionPerformed(evt);
            }
        });
        jPanel2.add(btnAnularfactura, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 70, 190, -1));

        btnBuscarFactura.setBackground(new java.awt.Color(255, 153, 0));
        btnBuscarFactura.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnBuscarFactura.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscarFactura.setText("BUSCAR FACTURA");
        btnBuscarFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarFacturaActionPerformed(evt);
            }
        });
        jPanel2.add(btnBuscarFactura, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 40, 190, -1));

        lblCrearProd10.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        lblCrearProd10.setText("Estado:");
        jPanel2.add(lblCrearProd10, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 140, 60, -1));

        cmbFact.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "...", "A", "X" }));
        jPanel2.add(cmbFact, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 140, 150, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 110, 680, 250));

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblCrearProd6.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        lblCrearProd6.setText("Detalles de factura:");
        jPanel3.add(lblCrearProd6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 140, -1));

        tblFact.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Producto", "Cantidad", "Precio Unitario", "Subtotal", "IVA", "Total"
            }
        ));
        jScrollPane1.setViewportView(tblFact);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 620, 180));

        lblCrearProd7.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        lblCrearProd7.setText("Subtotal:");
        jPanel3.add(lblCrearProd7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 230, 90, -1));
        jPanel3.add(txtTotalF, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 290, 150, -1));

        btnValidarStock.setBackground(new java.awt.Color(255, 153, 0));
        btnValidarStock.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnValidarStock.setForeground(new java.awt.Color(255, 255, 255));
        btnValidarStock.setText("VALIDAR STOCK");
        btnValidarStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValidarStockActionPerformed(evt);
            }
        });
        jPanel3.add(btnValidarStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 240, 190, -1));

        btnGuardarFact.setBackground(new java.awt.Color(255, 153, 0));
        btnGuardarFact.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnGuardarFact.setForeground(new java.awt.Color(255, 255, 255));
        btnGuardarFact.setText("GUARDAR FACTURA");
        btnGuardarFact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarFactActionPerformed(evt);
            }
        });
        jPanel3.add(btnGuardarFact, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 270, 190, -1));

        lblCrearProd13.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        lblCrearProd13.setText("Total Final:");
        jPanel3.add(lblCrearProd13, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 290, 90, -1));

        lblCrearProd14.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        lblCrearProd14.setText("IVA:");
        jPanel3.add(lblCrearProd14, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, 90, -1));
        jPanel3.add(txtTotalIVA, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 260, 150, -1));
        jPanel3.add(txtTotalF2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 230, 150, -1));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 370, 680, 340));

        exitBtn1.setBackground(new java.awt.Color(255, 255, 255));

        exitTxt1.setFont(new java.awt.Font("Roboto Light", 0, 24)); // NOI18N
        exitTxt1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exitTxt1.setText("<");
        exitTxt1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitTxt1.setPreferredSize(new java.awt.Dimension(40, 40));
        exitTxt1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitTxt1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                exitTxt1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                exitTxt1MouseExited(evt);
            }
        });

        javax.swing.GroupLayout exitBtn1Layout = new javax.swing.GroupLayout(exitBtn1);
        exitBtn1.setLayout(exitBtn1Layout);
        exitBtn1Layout.setHorizontalGroup(
            exitBtn1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exitBtn1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exitTxt1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        exitBtn1Layout.setVerticalGroup(
            exitBtn1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, exitBtn1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(exitTxt1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.add(exitBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 830, 730));

        exitBtn.setBackground(new java.awt.Color(255, 255, 255));

        exitTxt.setFont(new java.awt.Font("Roboto Light", 0, 24)); // NOI18N
        exitTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exitTxt.setText("<");
        exitTxt.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitTxt.setPreferredSize(new java.awt.Dimension(40, 40));
        exitTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitTxtMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                exitTxtMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                exitTxtMouseExited(evt);
            }
        });

        javax.swing.GroupLayout exitBtnLayout = new javax.swing.GroupLayout(exitBtn);
        exitBtn.setLayout(exitBtnLayout);
        exitBtnLayout.setHorizontalGroup(
            exitBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, exitBtnLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exitTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        exitBtnLayout.setVerticalGroup(
            exitBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, exitBtnLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(exitTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(exitBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarProdActionPerformed
        int filaSeleccionada = tblFact.getSelectedRow();

        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(null, "Seleccione un producto de la tabla para eliminar.");
            return;
        }

        DefaultTableModel modelo = (DefaultTableModel) tblFact.getModel();
        modelo.removeRow(filaSeleccionada);

        // Recalcular el total final despu챕s de eliminar el producto
        double total = 0;
        for (int i = 0; i < modelo.getRowCount(); i++) {
            total += Double.parseDouble(modelo.getValueAt(i, 3).toString());
        }
        txtTotalF.setText(String.format("%.2f", total));
    }//GEN-LAST:event_btnEliminarProdActionPerformed

    private void exitTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitTxtMouseClicked
        Dashboard dashboard = new Dashboard("A"); // o el permiso real que corresponda
        dashboard.setLocationRelativeTo(null);
        dashboard.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_exitTxtMouseClicked

    private void exitTxtMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitTxtMouseEntered
        exitBtn.setBackground(Color.red);
        exitTxt.setForeground(Color.white);
    }//GEN-LAST:event_exitTxtMouseEntered

    private void exitTxtMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitTxtMouseExited
        exitBtn.setBackground(Color.white);
        exitTxt.setForeground(Color.black);
    }//GEN-LAST:event_exitTxtMouseExited

    private void exitTxt1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitTxt1MouseClicked
        Dashboard dashboard = new Dashboard("A"); // o el permiso real que corresponda
        dashboard.setLocationRelativeTo(null);
        dashboard.setVisible(true);
        dispose();
    }//GEN-LAST:event_exitTxt1MouseClicked

    private void exitTxt1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitTxt1MouseEntered
        exitBtn.setBackground(Color.red);
        exitTxt.setForeground(Color.white);
    }//GEN-LAST:event_exitTxt1MouseEntered

    private void exitTxt1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitTxt1MouseExited
        exitBtn.setBackground(Color.white);
        exitTxt.setForeground(Color.black);
    }//GEN-LAST:event_exitTxt1MouseExited

    private void txtNumFacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumFacActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumFacActionPerformed

    private void btnAgregarProd1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarProd1ActionPerformed
        String nombreProd = txtProductoFact.getText().trim();

        if (nombreProd.isEmpty()) 
        {
            JOptionPane.showMessageDialog(null, "Ingrese un nombre de producto.");
            return;
        }

        try (Connection con = BD.conectar()) 
        {
            String sqlEstado = "SELECT prod_estado FROM MUE_PRODUCTOS WHERE LOWER(prod_nombre) = LOWER(?)";
            PreparedStatement psEstado = con.prepareStatement(sqlEstado);
            psEstado.setString(1, nombreProd);
            ResultSet rsEstado = psEstado.executeQuery();

            if (rsEstado.next()) 
            {
                String estado = rsEstado.getString("prod_estado");
                if (!estado.equals("A"))
                {
                    JOptionPane.showMessageDialog(null, "El producto est찼 inactivo y no puede ser facturado.");
                    return;
                }
            }
            else 
            {
                JOptionPane.showMessageDialog(null, "Producto no encontrado.");
                return;
            }

            String input = JOptionPane.showInputDialog("Ingrese la cantidad:");
            if (input == null || input.isEmpty()) return;
            int cantidad = Integer.parseInt(input);

            String sql = "SELECT * FROM MUE_PRODUCTOS WHERE LOWER(prod_nombre) = LOWER(?) AND prod_estado = 'A'";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, nombreProd);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) 
            {
                int stock = rs.getInt("prod_stock");
                double precio = rs.getDouble("prod_precio");
                int iva = rs.getInt("prod_IVA");

                if (cantidad > stock) 
                {
                    JOptionPane.showMessageDialog(null, "Stock insuficiente. Solo hay " + stock);
                    return;
                }

                double subtotal = precio * cantidad;
                double valorIVA = iva == 1 ? subtotal * 0.12 : 0;
                double total = subtotal + valorIVA;

                modeloTabla.addRow(new Object[]{
                    nombreProd,
                    cantidad,
                    precio,
                    subtotal,
                    valorIVA,
                    total
                });

                cantidades.add(cantidad);
                actualizarTotalFinal();
            } 
            else 
            {
                JOptionPane.showMessageDialog(null, "Producto no encontrado o inactivo.");
            }
        } 
        catch (Exception e) 
        {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btnAgregarProd1ActionPerformed

    private void btnValidarStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidarStockActionPerformed
        try (Connection con = BD.conectar()) 
        {
            for (int i = 0; i < modeloTabla.getRowCount(); i++) {
                String prod = modeloTabla.getValueAt(i, 0).toString();
                int cantidad = Integer.parseInt(modeloTabla.getValueAt(i, 1).toString());

                String sql = "SELECT prod_stock FROM MUE_PRODUCTOS WHERE LOWER(prod_nombre) = LOWER(?)";
                PreparedStatement ps = con.prepareStatement(sql);
                ps.setString(1, prod);
                ResultSet rs = ps.executeQuery();

                if (rs.next())
                {
                    int stock = rs.getInt("prod_stock");
                    if (cantidad > stock) 
                    {
                        JOptionPane.showMessageDialog(null, "Stock insuficiente para: " + prod);
                        return;
                    }
                }
            }

            JOptionPane.showMessageDialog(null, "Todos los productos tienen stock suficiente.");
        } 
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error al validar stock: " + e.getMessage());
        }
    }//GEN-LAST:event_btnValidarStockActionPerformed

    private void btnGuardarFactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarFactActionPerformed
        String cedula = txtCedRuc.getText().trim();
        String numero = txtNumFac.getText().trim();
        String fecha = java.time.LocalDate.now().toString();
        String responsable = Login.usuarioLogueado;

        double totalFactura;
        try 
        {
            totalFactura = Double.parseDouble(txtTotalF.getText().replace(",", "."));
        } 
        catch (NumberFormatException e) 
        {
            JOptionPane.showMessageDialog(null, "Formato num챕rico inv찼lido en Total Final.");
            return;
        }

        try (Connection con = BD.conectar()) 
        {
            con.setAutoCommit(false);

            int clienteId = obtenerClienteId(con, cedula);
            int usuarioId = obtenerUsuarioId(con, responsable);

            String sqlFac = "INSERT INTO MUE_FACTURAS (fac_id, fac_numero, fac_fecha, cli_id, emp_id, fac_subtotal, fac_IVA, fac_estado, fac_valor_total) " +
                            "VALUES (fac_id_seq.NEXTVAL, ?, TO_DATE(?, 'YYYY-MM-DD'), ?, ?, ?, ?, 'A', ?)";

            double subtotal = 0, iva = 0;
            for (int i = 0; i < modeloTabla.getRowCount(); i++) 
            {
                subtotal += Double.parseDouble(modeloTabla.getValueAt(i, 3).toString().replace(",", "."));
                iva += Double.parseDouble(modeloTabla.getValueAt(i, 4).toString().replace(",", "."));
            }

            PreparedStatement psFac = con.prepareStatement(sqlFac, new String[]{"fac_id"});
            psFac.setString(1, numero);
            psFac.setString(2, fecha);
            psFac.setInt(3, clienteId);
            psFac.setInt(4, usuarioId);
            psFac.setDouble(5, subtotal);
            psFac.setDouble(6, iva);
            psFac.setDouble(7, totalFactura);
            psFac.executeUpdate();

            ResultSet rsFac = psFac.getGeneratedKeys();
            int facturaId = 0;
            if (rsFac.next()) facturaId = rsFac.getInt(1);

            for (int i = 0; i < modeloTabla.getRowCount(); i++) 
            {
                String prod = modeloTabla.getValueAt(i, 0).toString();
                int cant = Integer.parseInt(modeloTabla.getValueAt(i, 1).toString());
                double prec = Double.parseDouble(modeloTabla.getValueAt(i, 2).toString().replace(",", "."));
                double sub = Double.parseDouble(modeloTabla.getValueAt(i, 3).toString().replace(",", "."));
                double ivaDet = Double.parseDouble(modeloTabla.getValueAt(i, 4).toString().replace(",", "."));
                double total = Double.parseDouble(modeloTabla.getValueAt(i, 5).toString().replace(",", "."));

                int prodId = obtenerProductoId(con, prod);

                String sqlDet = "INSERT INTO MUE_DETALLES_FACTURAS (det_id, fac_id, prod_id, det_cantidad, det_precio_unitario, det_subtotal, det_IVA, det_total) " +
                                "VALUES (det_id_seq.NEXTVAL, ?, ?, ?, ?, ?, ?, ?)";
                PreparedStatement psDet = con.prepareStatement(sqlDet);
                psDet.setInt(1, facturaId);
                psDet.setInt(2, prodId);
                psDet.setInt(3, cant);
                psDet.setDouble(4, prec);
                psDet.setDouble(5, sub);
                psDet.setDouble(6, ivaDet);
                psDet.setDouble(7, total);
                psDet.executeUpdate();

                PreparedStatement psStock = con.prepareStatement("UPDATE MUE_PRODUCTOS SET prod_stock = prod_stock - ? WHERE prod_id = ?");
                psStock.setInt(1, cant);
                psStock.setInt(2, prodId);
                psStock.executeUpdate();

                PreparedStatement psEstado = con.prepareStatement("UPDATE MUE_PRODUCTOS SET prod_estado = 'I' WHERE prod_id = ?");
                psEstado.setInt(1, prodId);
                psEstado.executeUpdate();
            }

            con.commit();
            JOptionPane.showMessageDialog(null, "Factura guardada correctamente.");
            cargarFacturas();
            modeloTabla.setRowCount(0);
            txtTotalF.setText("");

        } 
        catch (Exception e) 
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al guardar factura: " + e.getMessage());
        }
    }//GEN-LAST:event_btnGuardarFactActionPerformed

    private void btnAnularfacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnularfacturaActionPerformed
        String numero = txtNumFac.getText().trim();

        if (numero.isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Ingrese el n첬mero de factura.");
            return;
        }

        try (Connection con = BD.conectar()) 
        {
            // Verificar si la factura existe y est찼 activa
            int facId = -1;
            PreparedStatement ps = con.prepareStatement(
                "SELECT fac_id FROM MUE_FACTURAS WHERE fac_numero = ? AND fac_estado = 'A'"
            );
            ps.setString(1, numero);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) 
            {
                facId = rs.getInt("fac_id");
            } 
            else 
            {
                JOptionPane.showMessageDialog(null, "Factura no encontrada o ya anulada.");
                return;
            }

            // Confirmaci처n de anulaci처n
            int confirm = JOptionPane.showConfirmDialog(null,
                "쩔Est찼 seguro que desea anular esta factura?",
                "Confirmar anulaci처n", JOptionPane.YES_NO_OPTION);

            if (confirm != JOptionPane.YES_OPTION) return;

            // Cambiar estado de la factura a 'X' (Anulada)
            PreparedStatement psEstado = con.prepareStatement(
                "UPDATE MUE_FACTURAS SET fac_estado = 'X' WHERE fac_id = ?"
            );
            psEstado.setInt(1, facId);
            psEstado.executeUpdate();

            // Obtener productos y cantidades de la factura
            PreparedStatement psDet = con.prepareStatement(
                "SELECT prod_id, det_cantidad FROM MUE_DETALLES_FACTURAS WHERE fac_id = ?"
            );
            psDet.setInt(1, facId);
            ResultSet rsDet = psDet.executeQuery();

            while (rsDet.next()) 
            {
                int prodId = rsDet.getInt("prod_id");
                int cantidad = rsDet.getInt("det_cantidad");

                PreparedStatement psStock = con.prepareStatement(
                    "UPDATE MUE_PRODUCTOS SET prod_stock = prod_stock + ? WHERE prod_id = ?"
                );
                psStock.setInt(1, cantidad);
                psStock.setInt(2, prodId);
                psStock.executeUpdate();
            }

            // Mostrar 챕xito y actualizar comboBox
            JOptionPane.showMessageDialog(null, "Factura anulada correctamente. Stock restaurado.");
            cmbFact.setSelectedItem("X = Anulada");

        } 
        catch (Exception e) 
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al anular factura: " + e.getMessage());
        }
    }//GEN-LAST:event_btnAnularfacturaActionPerformed

    private void btnBuscarFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarFacturaActionPerformed
        String numero = txtNumFac.getText().trim();

        if (numero.isEmpty()) 
        {
            JOptionPane.showMessageDialog(null, "Ingrese el n첬mero de factura.");
            return;
        }

        DefaultTableModel modelo = (DefaultTableModel) tblFact.getModel();
        modelo.setRowCount(0); // limpiar tabla

        try (Connection con = BD.conectar()) 
        {
            String sqlFac = "SELECT f.fac_id, TO_CHAR(f.fac_fecha, 'YYYY-MM-DD') AS fac_fecha, " +
                            "c.cli_cedula, c.cli_nombre, e.emp_usuario, f.fac_subtotal, f.fac_iva, f.fac_valor_total, f.fac_estado " +
                            "FROM MUE_FACTURAS f " +
                            "JOIN MUE_CLIENTES c ON f.cli_id = c.cli_id " +
                            "JOIN MUE_EMPLEADOS e ON f.emp_id = e.emp_id " +
                            "WHERE f.fac_numero = ?";
            PreparedStatement ps = con.prepareStatement(sqlFac);
            ps.setString(1, numero);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) 
            {
                int facturaId = rs.getInt("fac_id");
                txtCedRuc.setText(rs.getString("cli_cedula"));
                txtFechaFac.setText(rs.getString("fac_fecha"));
                txtResponFac.setText(rs.getString("emp_usuario")); // nombre del responsable
                txtTotalF.setText(String.format("%.2f", rs.getDouble("fac_valor_total")));

                String estado = rs.getString("fac_estado");
                if (estado.equals("A")) 
                {
                    cmbFact.setSelectedItem("Activa");
                } 
                else 
                {
                    cmbFact.setSelectedItem("Anulada");
                }

                // Cargar productos
                String sqlDet = "SELECT p.prod_nombre, d.det_cantidad, d.det_precio_unitario, " +
                                "d.det_subtotal, d.det_iva, d.det_total " +
                                "FROM MUE_DETALLES_FACTURAS d " +
                                "JOIN MUE_PRODUCTOS p ON d.prod_id = p.prod_id " +
                                "WHERE d.fac_id = ?";
                PreparedStatement psDet = con.prepareStatement(sqlDet);
                psDet.setInt(1, facturaId);
                ResultSet rsDet = psDet.executeQuery();

                while (rsDet.next()) 
                {
                    modelo.addRow(new Object[]{
                        rsDet.getString("prod_nombre"),
                        rsDet.getInt("det_cantidad"),
                        rsDet.getDouble("det_precio_unitario"),
                        rsDet.getDouble("det_subtotal"),
                        rsDet.getDouble("det_iva"),
                        rsDet.getDouble("det_total")
                    });
                }

            }
            else 
            {
                JOptionPane.showMessageDialog(null, "Factura no encontrada.");
            }

        } 
        catch (Exception e) 
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al buscar factura: " + e.getMessage());
        }
    }//GEN-LAST:event_btnBuscarFacturaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarProd1;
    private javax.swing.JButton btnAnularfactura;
    private javax.swing.JButton btnBuscarFactura;
    private javax.swing.JButton btnEliminarProd;
    private javax.swing.JButton btnGuardarFact;
    private javax.swing.JButton btnValidarStock;
    private javax.swing.JComboBox<String> cmbFact;
    private javax.swing.JPanel exitBtn;
    private javax.swing.JPanel exitBtn1;
    private javax.swing.JLabel exitTxt;
    private javax.swing.JLabel exitTxt1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lblCrearProd10;
    private javax.swing.JLabel lblCrearProd11;
    private javax.swing.JLabel lblCrearProd12;
    private javax.swing.JLabel lblCrearProd13;
    private javax.swing.JLabel lblCrearProd14;
    private javax.swing.JLabel lblCrearProd5;
    private javax.swing.JLabel lblCrearProd6;
    private javax.swing.JLabel lblCrearProd7;
    private javax.swing.JLabel lblCrearProd8;
    private javax.swing.JLabel lblCrearProd9;
    private javax.swing.JLabel lblMateriales;
    private javax.swing.JLabel lblMateriales1;
    private javax.swing.JTable tblFact;
    private javax.swing.JTextField txtCedRuc;
    private javax.swing.JTextField txtFechaFac;
    private javax.swing.JTextField txtNumFac;
    private javax.swing.JTextField txtProductoFact;
    private javax.swing.JTextField txtResponFac;
    private javax.swing.JTextField txtTotalF;
    private javax.swing.JTextField txtTotalF2;
    private javax.swing.JTextField txtTotalIVA;
    // End of variables declaration//GEN-END:variables
}
