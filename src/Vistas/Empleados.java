package Vistas;

import Main.BD;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Carlos Moyano
 */

public class Empleados extends javax.swing.JFrame 
{
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Empleados.class.getName());

    /**
     * Creates new form Empleados
     */
    public Empleados() {
        initComponents();
        cargarEmpleados();
        tablaEmpleados.setDefaultEditor(Object.class, null);
        
        tablaEmpleados.getSelectionModel().addListSelectionListener(evt -> {
            if (!evt.getValueIsAdjusting()) 
            {
              llenarCamposDesdeTabla();
            }
        });    
    }
    
    public void cargarEmpleados() {
        DefaultTableModel modelo = (DefaultTableModel) tablaEmpleados.getModel();
        modelo.setRowCount(0);

        String sql = "SELECT e.emp_id, e.emp_usuario, e.emp_contrasenia, p.per_nombre " +
                     "FROM MUE_EMPLEADOS e " +
                     "LEFT JOIN MUE_PERMISOS_EMPLEADOS p ON p.per_id = e.per_id " +
                     "ORDER BY e.emp_id";

        try (Connection cn = BD.conectar();
             PreparedStatement ps = cn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                String permiso = rs.getString("per_nombre");
                String descripcion = permiso != null && permiso.equals("A") ? "Administrador" : "Empleado General";

                modelo.addRow(new Object[]{
                    rs.getInt("emp_id"),
                    rs.getString("emp_usuario"),
                    rs.getString("emp_contrasenia"),
                    descripcion
                });
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar empleados: " + e.getMessage());
        }
    }

    
    private void llenarCamposDesdeTabla() {
    int fila = tablaEmpleados.getSelectedRow();
    if (fila < 0) return;

    DefaultTableModel m = (DefaultTableModel) tablaEmpleados.getModel();

    Object usuario = m.getValueAt(fila, 1);
    Object contrasenia = m.getValueAt(fila, 2);
    Object permiso = m.getValueAt(fila, 3);

    txtNombreEmp.setText(usuario != null ? usuario.toString() : "");
    txtContraseñaEmp.setText(contrasenia != null ? contrasenia.toString() : "");

    if (permiso != null) {
        String desc = permiso.toString();
        String clave = desc.equalsIgnoreCase("Administrador") ? "A" : "E";
        cmbEmp.setSelectedItem(clave);
    } else {
        cmbEmp.setSelectedIndex(0); // opción por defecto
    }
}



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        lblNombreCat = new javax.swing.JLabel();
        txtContraseñaEmp = new javax.swing.JTextField();
        btnAgregarEmp = new javax.swing.JButton();
        lblNombreCat1 = new javax.swing.JLabel();
        txtNombreEmp = new javax.swing.JTextField();
        lblNombreCat2 = new javax.swing.JLabel();
        cmbEmp = new javax.swing.JComboBox<>();
        btnEliminarEmp = new javax.swing.JButton();
        btnActualizarEmp = new javax.swing.JButton();
        lblCrearProd4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        lblListadoEmp = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaEmpleados = new javax.swing.JTable();
        exitBtn = new javax.swing.JPanel();
        exitTxt = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        title.setFont(new java.awt.Font("Roboto Black", 1, 24)); // NOI18N
        title.setText("Empleados");
        jPanel1.add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, -1, -1));

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 100, 410, 20));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblNombreCat.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        lblNombreCat.setText("Permisos:");
        jPanel2.add(lblNombreCat, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 50, -1, -1));
        jPanel2.add(txtContraseñaEmp, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 90, 210, -1));

        btnAgregarEmp.setBackground(new java.awt.Color(255, 153, 0));
        btnAgregarEmp.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnAgregarEmp.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregarEmp.setText("AGREGAR");
        btnAgregarEmp.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnAgregarEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarEmpActionPerformed(evt);
            }
        });
        jPanel2.add(btnAgregarEmp, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 140, 100, 30));

        lblNombreCat1.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        lblNombreCat1.setText("Usuario:");
        jPanel2.add(lblNombreCat1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, -1, -1));
        jPanel2.add(txtNombreEmp, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 50, 210, -1));

        lblNombreCat2.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        lblNombreCat2.setText("Contraseña:");
        jPanel2.add(lblNombreCat2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, -1, -1));

        cmbEmp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "E" }));
        jPanel2.add(cmbEmp, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 50, -1, -1));

        btnEliminarEmp.setBackground(new java.awt.Color(255, 153, 0));
        btnEliminarEmp.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnEliminarEmp.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminarEmp.setText("ELIMINAR");
        btnEliminarEmp.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnEliminarEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarEmpActionPerformed(evt);
            }
        });
        jPanel2.add(btnEliminarEmp, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 140, 100, 30));

        btnActualizarEmp.setBackground(new java.awt.Color(255, 153, 0));
        btnActualizarEmp.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnActualizarEmp.setForeground(new java.awt.Color(255, 255, 255));
        btnActualizarEmp.setText("ACTUALIZAR");
        btnActualizarEmp.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnActualizarEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarEmpActionPerformed(evt);
            }
        });
        jPanel2.add(btnActualizarEmp, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 140, 100, 30));

        lblCrearProd4.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        lblCrearProd4.setText("Crear Empleado");
        jPanel2.add(lblCrearProd4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 200, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 120, 590, 190));

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblListadoEmp.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        lblListadoEmp.setText("Listado de Empleados");
        jPanel3.add(lblListadoEmp, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 200, -1));

        tablaEmpleados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Usuario", "Contraseña", "Permiso"
            }
        ));
        jScrollPane1.setViewportView(tablaEmpleados);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 530, 240));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 330, 590, 320));

        exitBtn.setBackground(new java.awt.Color(255, 255, 255));

        exitTxt.setFont(new java.awt.Font("Roboto Light", 0, 24)); // NOI18N
        exitTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exitTxt.setText("<");
        exitTxt.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitTxt.setPreferredSize(new java.awt.Dimension(40, 40));
        exitTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitTxtMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                exitTxtMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                exitTxtMouseExited(evt);
            }
        });

        javax.swing.GroupLayout exitBtnLayout = new javax.swing.GroupLayout(exitBtn);
        exitBtn.setLayout(exitBtnLayout);
        exitBtnLayout.setHorizontalGroup(
            exitBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exitBtnLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exitTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        exitBtnLayout.setVerticalGroup(
            exitBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, exitBtnLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(exitTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.add(exitBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 720, 700));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarEmpActionPerformed
        
        String usuario   = txtNombreEmp.getText().trim();
        String clave     = txtContraseñaEmp.getText().trim();
        String permiso   = cmbEmp.getSelectedItem().toString();

        
        if(usuario.isEmpty() || clave.isEmpty()) 
        {
            JOptionPane.showMessageDialog(this,"Campos incompletos");
            return;
        }

        String sql = "INSERT INTO MUE_EMPLEADOS(emp_id, emp_usuario, emp_contrasenia, per_id) "
                    + "VALUES(emp_id_seq.NEXTVAL, ?, ?, "
                    + "  (SELECT per_id FROM MUE_PERMISOS_EMPLEADOS WHERE per_nombre = ?)"
                    + ")";

        try (Connection cn = BD.conectar();
             PreparedStatement ps = cn.prepareStatement(sql)) 
        {
            ps.setString(1, usuario);
            ps.setString(2, clave);
            ps.setString(3, permiso);
            ps.executeUpdate();

            JOptionPane.showMessageDialog(this,"Empleado agregado correctamente");

            txtNombreEmp.setText("");
            txtContraseñaEmp.setText("");
            cmbEmp.setSelectedIndex(0);

            cargarEmpleados();

        } 
        catch (SQLException ex) 
        {
            JOptionPane.showMessageDialog(this,"Error al agregar empleado: "+ex.getMessage());
        }
    }//GEN-LAST:event_btnAgregarEmpActionPerformed

    private void btnEliminarEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarEmpActionPerformed
        
        int fila = tablaEmpleados.getSelectedRow();
        if (fila < 0) 
        {
            JOptionPane.showMessageDialog(this, "Seleccione un empleado para eliminar.");
            return;
        }

        DefaultTableModel modelo = (DefaultTableModel) tablaEmpleados.getModel();
        int empId = (int) modelo.getValueAt(fila, 0);

        // Contar cuantas facutras tiene el empleado
        String sqlCount = "SELECT COUNT(*) FROM MUE_FACTURAS WHERE emp_id = ?";
        try (Connection cn = BD.conectar();
             PreparedStatement psCount = cn.prepareStatement(sqlCount)) {

            psCount.setInt(1, empId);
            try (ResultSet rsCount = psCount.executeQuery()) {
                rsCount.next();
                int numFacturas = rsCount.getInt(1);
                
                if (numFacturas > 0) 
                {
                    JOptionPane.showMessageDialog(
                      this,
                      "El empleado tiene " + numFacturas +
                      " factura(s) asociada(s).\n" +
                      "Deshabilite las facturas antes de eliminar al empleado.",
                      "Caso contrario, no se puede eliminar",
                      JOptionPane.WARNING_MESSAGE
                    );
                    return;
                }
            }
        } 
        catch (SQLException ex) 
        {
            JOptionPane.showMessageDialog(this,
                "Error al comprobar facturas: " + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Si no tiene facturas, se elimina el empleado
        int resp = JOptionPane.showConfirmDialog(
            this,
            "¿Desea eliminar al empleado con ID " + empId + "?",
            "Confirmar eliminación",
            JOptionPane.YES_NO_OPTION
        );
        
        if (resp != JOptionPane.YES_OPTION) 
        {
            return;
        }

        String sqlDelete = "DELETE FROM MUE_EMPLEADOS WHERE emp_id = ?";
        try (Connection cn = BD.conectar();
             PreparedStatement psDelete = cn.prepareStatement(sqlDelete)) {

            psDelete.setInt(1, empId);
            int filas = psDelete.executeUpdate();
            if (filas > 0) 
            {
                JOptionPane.showMessageDialog(this,
                    "Empleado eliminado correctamente.");
                cargarEmpleados();
            } 
            else 
            {
                JOptionPane.showMessageDialog(this,
                    "No se encontró el empleado.");
            }
        } 
        catch (SQLException ex) 
        {
            JOptionPane.showMessageDialog(this,
                "Error al eliminar empleado: " + ex.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarEmpActionPerformed

    private void btnActualizarEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarEmpActionPerformed
       
        int fila = tablaEmpleados.getSelectedRow();
        if (fila < 0) 
        {
            JOptionPane.showMessageDialog(this, "Seleccione un empleado para actualizar.");
            return;
        }

        DefaultTableModel m = (DefaultTableModel) tablaEmpleados.getModel();
        int empId = (int) m.getValueAt(fila, 0);
        String usuario = txtNombreEmp.getText().trim();
        String contrasenia = txtContraseñaEmp.getText().trim();
        String permisoLetra = cmbEmp.getSelectedItem().toString();  // "A" o "E"

        if (usuario.isEmpty() || contrasenia.isEmpty()) 
        {
            JOptionPane.showMessageDialog(this, "Usuario y contraseña no pueden estar vacíos.");
            return;
        }

        String sql = ""
          + "UPDATE MUE_EMPLEADOS "
          + "SET emp_usuario = ?, "
          + "    emp_contrasenia = ?, "
          + "    per_id = (SELECT per_id FROM MUE_PERMISOS_EMPLEADOS WHERE per_nombre = ?) "
          + "WHERE emp_id = ?";

        try (Connection cn = BD.conectar();
             PreparedStatement ps = cn.prepareStatement(sql)) 
        {
            ps.setString(1, usuario);
            ps.setString(2, contrasenia);
            ps.setString(3, permisoLetra);
            ps.setInt   (4, empId);

            int filas = ps.executeUpdate();
            if (filas > 0) {
                JOptionPane.showMessageDialog(this, "Empleado actualizado correctamente.");
                cargarEmpleados();
            } 
            else 
            {
                JOptionPane.showMessageDialog(this, "No se encontró el empleado.");
            }
        } 
        catch (SQLException ex) 
        {
            JOptionPane.showMessageDialog(this, "Error al actualizar empleado: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnActualizarEmpActionPerformed

    private void exitTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitTxtMouseClicked
        Dashboard dashboard = new Dashboard("A"); // o el permiso real que corresponda
        dashboard.setLocationRelativeTo(null);
        dashboard.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_exitTxtMouseClicked

    private void exitTxtMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitTxtMouseEntered
        exitBtn.setBackground(Color.red);
        exitTxt.setForeground(Color.white);
    }//GEN-LAST:event_exitTxtMouseEntered

    private void exitTxtMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitTxtMouseExited
        exitBtn.setBackground(Color.white);
        exitTxt.setForeground(Color.black);
    }//GEN-LAST:event_exitTxtMouseExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizarEmp;
    private javax.swing.JButton btnAgregarEmp;
    private javax.swing.JButton btnEliminarEmp;
    private javax.swing.JComboBox<String> cmbEmp;
    private javax.swing.JPanel exitBtn;
    private javax.swing.JLabel exitTxt;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblCrearProd4;
    private javax.swing.JLabel lblListadoEmp;
    private javax.swing.JLabel lblNombreCat;
    private javax.swing.JLabel lblNombreCat1;
    private javax.swing.JLabel lblNombreCat2;
    private javax.swing.JTable tablaEmpleados;
    private javax.swing.JLabel title;
    private javax.swing.JTextField txtContraseñaEmp;
    private javax.swing.JTextField txtNombreEmp;
    // End of variables declaration//GEN-END:variables
}
