/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vistas;

import Main.BD;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author pedro
 */
public class FactProveedores extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(FactProveedores.class.getName());
    DefaultTableModel modeloTabla;
    List<Integer> cantidades = new ArrayList<>();

    /**
     * Creates new form FactProveedores
     */
    public FactProveedores() {
        initComponents();
        modeloTabla = (DefaultTableModel) tblFact.getModel();
        modeloTabla.setRowCount(0);
        txtFechaFac.setText(LocalDate.now().toString());
    }

    private void actualizarTotalFinal() {
        double totalFinal = 0;
        for (int i = 0; i < modeloTabla.getRowCount(); i++) {
            totalFinal += Double.parseDouble(modeloTabla.getValueAt(i, 3).toString());
        }
        txtTotalF.setText(String.format("%.2f", totalFinal));
    }

    // Obtener ID de proveedor
    private int obtenerProveedorId(Connection con, String nombre) throws SQLException {
        String sql = "SELECT prov_id FROM MUE_PROVEEDORES WHERE LOWER(prov_nombre) = LOWER(?)";
        PreparedStatement ps = con.prepareStatement(sql);
        ps.setString(1, nombre);
        ResultSet rs = ps.executeQuery();
        if (rs.next()) return rs.getInt("prov_id");
        throw new SQLException("Proveedor no encontrado");
    }

    // Obtener ID de producto
    private int obtenerProductoId(Connection con, String nombreProd) throws SQLException {
        String sql = "SELECT prod_id FROM MUE_PRODUCTOS WHERE LOWER(prod_nombre) = LOWER(?)";
        PreparedStatement ps = con.prepareStatement(sql);
        ps.setString(1, nombreProd);
        ResultSet rs = ps.executeQuery();
        if (rs.next()) return rs.getInt("prod_id");
        throw new SQLException("Producto no encontrado");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblMateriales1 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        txtNumFac = new javax.swing.JTextField();
        txtCedRuc = new javax.swing.JTextField();
        lblCrearProd9 = new javax.swing.JLabel();
        txtProductoFact = new javax.swing.JTextField();
        lblCrearProd8 = new javax.swing.JLabel();
        lblCrearProd11 = new javax.swing.JLabel();
        btnEliminarProd = new javax.swing.JButton();
        btnAgregarProd1 = new javax.swing.JButton();
        lblCrearProd12 = new javax.swing.JLabel();
        txtFechaFac = new javax.swing.JTextField();
        btnAnularfactura = new javax.swing.JButton();
        btnBuscarFactura = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        lblCrearProd6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFact = new javax.swing.JTable();
        lblCrearProd7 = new javax.swing.JLabel();
        txtTotalF = new javax.swing.JTextField();
        btnGuardarFact = new javax.swing.JButton();
        exitBtn = new javax.swing.JPanel();
        exitTxt = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setToolTipText("");
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblMateriales1.setFont(new java.awt.Font("Roboto Black", 1, 24)); // NOI18N
        lblMateriales1.setText("Facturación de Proveedores");
        jPanel1.add(lblMateriales1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, -1, -1));

        jSeparator3.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 100, 680, 20));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtNumFac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumFacActionPerformed(evt);
            }
        });
        jPanel2.add(txtNumFac, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 180, -1));
        jPanel2.add(txtCedRuc, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 40, 180, -1));

        lblCrearProd9.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        lblCrearProd9.setText("Nombre Proveedor:");
        jPanel2.add(lblCrearProd9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 150, -1));
        jPanel2.add(txtProductoFact, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 160, 220, -1));

        lblCrearProd8.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        lblCrearProd8.setText("Producto:");
        jPanel2.add(lblCrearProd8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 100, -1));

        lblCrearProd11.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        lblCrearProd11.setText("N° Factura:");
        jPanel2.add(lblCrearProd11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 140, -1));

        btnEliminarProd.setBackground(new java.awt.Color(255, 153, 0));
        btnEliminarProd.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnEliminarProd.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminarProd.setText("ELIMINAR");
        btnEliminarProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarProdActionPerformed(evt);
            }
        });
        jPanel2.add(btnEliminarProd, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 190, 110, -1));

        btnAgregarProd1.setBackground(new java.awt.Color(255, 153, 0));
        btnAgregarProd1.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnAgregarProd1.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregarProd1.setText("AGREGAR");
        btnAgregarProd1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarProd1ActionPerformed(evt);
            }
        });
        jPanel2.add(btnAgregarProd1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 190, 110, -1));

        lblCrearProd12.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        lblCrearProd12.setText("Fecha:");
        jPanel2.add(lblCrearProd12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 50, -1));

        txtFechaFac.setEditable(false);
        jPanel2.add(txtFechaFac, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 100, 150, -1));

        btnAnularfactura.setBackground(new java.awt.Color(255, 153, 0));
        btnAnularfactura.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnAnularfactura.setForeground(new java.awt.Color(255, 255, 255));
        btnAnularfactura.setText("ANULAR FACTURA");
        btnAnularfactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnularfacturaActionPerformed(evt);
            }
        });
        jPanel2.add(btnAnularfactura, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 70, 190, -1));

        btnBuscarFactura.setBackground(new java.awt.Color(255, 153, 0));
        btnBuscarFactura.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnBuscarFactura.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscarFactura.setText("BUSCAR FACTURA");
        btnBuscarFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarFacturaActionPerformed(evt);
            }
        });
        jPanel2.add(btnBuscarFactura, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 40, 190, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 110, 680, 250));

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblCrearProd6.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        lblCrearProd6.setText("Detalles de factura:");
        jPanel3.add(lblCrearProd6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 140, -1));

        tblFact.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Producto", "Cantidad", "Precio Unitario", "Subtotal"
            }
        ));
        jScrollPane1.setViewportView(tblFact);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 620, 180));

        lblCrearProd7.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        lblCrearProd7.setText("Total Final:");
        jPanel3.add(lblCrearProd7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, 90, -1));
        jPanel3.add(txtTotalF, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 240, 150, -1));

        btnGuardarFact.setBackground(new java.awt.Color(255, 153, 0));
        btnGuardarFact.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnGuardarFact.setForeground(new java.awt.Color(255, 255, 255));
        btnGuardarFact.setText("GUARDAR FACTURA");
        btnGuardarFact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarFactActionPerformed(evt);
            }
        });
        jPanel3.add(btnGuardarFact, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 270, 190, -1));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 370, 680, 310));

        exitBtn.setBackground(new java.awt.Color(255, 255, 255));

        exitTxt.setFont(new java.awt.Font("Roboto Light", 0, 24)); // NOI18N
        exitTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exitTxt.setText("<");
        exitTxt.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitTxt.setPreferredSize(new java.awt.Dimension(40, 40));
        exitTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitTxtMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                exitTxtMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                exitTxtMouseExited(evt);
            }
        });

        javax.swing.GroupLayout exitBtnLayout = new javax.swing.GroupLayout(exitBtn);
        exitBtn.setLayout(exitBtnLayout);
        exitBtnLayout.setHorizontalGroup(
            exitBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exitBtnLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exitTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        exitBtnLayout.setVerticalGroup(
            exitBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, exitBtnLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exitTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(exitBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 830, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 830, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 730, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 730, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNumFacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumFacActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumFacActionPerformed

    private void btnEliminarProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarProdActionPerformed
        int filaSeleccionada = tblFact.getSelectedRow();

        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(null, "Seleccione un producto de la tabla para eliminar.");
            return;
        }

        DefaultTableModel modelo = (DefaultTableModel) tblFact.getModel();
        modelo.removeRow(filaSeleccionada);

        // Recalcular el total final después de eliminar el producto
        double total = 0;
        for (int i = 0; i < modelo.getRowCount(); i++) {
            total += Double.parseDouble(modelo.getValueAt(i, 3).toString());
        }
        txtTotalF.setText(String.format("%.2f", total));
    }//GEN-LAST:event_btnEliminarProdActionPerformed

    private void btnAgregarProd1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarProd1ActionPerformed
        String nombreProd = txtProductoFact.getText().trim();
        if (nombreProd.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Ingrese un nombre de producto.");
            return;
        }

        String input = JOptionPane.showInputDialog("Ingrese la cantidad comprada:");
        if (input == null || input.isEmpty()) return;
        int cantidad = Integer.parseInt(input);

        try (Connection con = BD.conectar()) {
            String sql = "SELECT prod_precio FROM MUE_PRODUCTOS WHERE LOWER(prod_nombre) = LOWER(?)";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, nombreProd);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                double precio = rs.getDouble("prod_precio");
                double subtotal = precio * cantidad;

                modeloTabla.addRow(new Object[]{nombreProd, cantidad, precio, subtotal});
                cantidades.add(cantidad);
                actualizarTotalFinal();
            } else {
                JOptionPane.showMessageDialog(null, "Producto no encontrado.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btnAgregarProd1ActionPerformed

    private void btnAnularfacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnularfacturaActionPerformed
        String numero = txtNumFac.getText().trim();

        if (numero.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Ingrese el número de factura.");
            return;
        }

        try (Connection con = BD.conectar()) {
            // Verificar existencia de la factura
            String sqlCab = "SELECT comp_id FROM MUE_RECEPCION_PROVEEDORES WHERE comp_numero = ? AND comp_estado = 'A'";
            PreparedStatement psCab = con.prepareStatement(sqlCab);
            psCab.setString(1, numero);
            ResultSet rsCab = psCab.executeQuery();

            int compraId = -1;
            if (rsCab.next()) {
                compraId = rsCab.getInt("comp_id");
            } else {
                JOptionPane.showMessageDialog(null, "Factura no encontrada o ya anulada.");
                return;
            }

            // Confirmación
            int confirm = JOptionPane.showConfirmDialog(null, 
                "¿Está seguro que desea anular esta factura?", 
                "Confirmar Anulación", JOptionPane.YES_NO_OPTION);
            if (confirm != JOptionPane.YES_OPTION) return;

            // Cambiar estado a 'X' (Anulada)
            String sqlAnular = "UPDATE MUE_RECEPCION_PROVEEDORES SET comp_estado = 'X' WHERE comp_id = ?";
            PreparedStatement psAnular = con.prepareStatement(sqlAnular);
            psAnular.setInt(1, compraId);
            psAnular.executeUpdate();

            // Restar stock por los productos adquiridos en esta factura anulada
            String sqlDet = "SELECT prod_id, det_comp_cantidad FROM MUE_DETALLES_COMPRAS WHERE comp_id = ?";
            PreparedStatement psDet = con.prepareStatement(sqlDet);
            psDet.setInt(1, compraId);
            ResultSet rsDet = psDet.executeQuery();

            while (rsDet.next()) {
                int prodId = rsDet.getInt("prod_id");
                int cantidad = rsDet.getInt("det_comp_cantidad");

                String sqlStock = "UPDATE MUE_PRODUCTOS SET prod_stock = prod_stock - ? WHERE prod_id = ?";
                PreparedStatement psStock = con.prepareStatement(sqlStock);
                psStock.setInt(1, cantidad);
                psStock.setInt(2, prodId);
                psStock.executeUpdate();
            }

            JOptionPane.showMessageDialog(null, "Factura anulada correctamente y stock ajustado.");

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al anular factura: " + e.getMessage());
        }
    }//GEN-LAST:event_btnAnularfacturaActionPerformed

    private void btnBuscarFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarFacturaActionPerformed
        String numero = txtNumFac.getText().trim();

        if (numero.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Ingrese el número de factura.");
            return;
        }

        DefaultTableModel modelo = (DefaultTableModel) tblFact.getModel();
        modelo.setRowCount(0); // limpiar tabla

        try (Connection con = BD.conectar()) {
            String sqlCab = "SELECT comp_id, TO_CHAR(comp_fecha, 'YYYY-MM-DD') AS fecha, comp_total, comp_estado, p.prov_nombre " +
                            "FROM MUE_RECEPCION_PROVEEDORES rp " +
                            "JOIN MUE_PROVEEDORES p ON rp.prov_id = p.prov_id " +
                            "WHERE comp_numero = ?";
            PreparedStatement psCab = con.prepareStatement(sqlCab);
            psCab.setString(1, numero);
            ResultSet rsCab = psCab.executeQuery();

            if (rsCab.next()) {
                int compraId = rsCab.getInt("comp_id");
                txtCedRuc.setText(rsCab.getString("prov_nombre"));
                txtFechaFac.setText(rsCab.getString("fecha"));
                txtTotalF.setText(String.format("%.2f", rsCab.getDouble("comp_total")));

                // Cargar detalles
                String sqlDet = "SELECT pr.prod_nombre, dc.det_comp_cantidad, pr.prod_precio, (dc.det_comp_cantidad * pr.prod_precio) AS subtotal " +
                                "FROM MUE_DETALLES_COMPRAS dc " +
                                "JOIN MUE_PRODUCTOS pr ON dc.prod_id = pr.prod_id " +
                                "WHERE dc.comp_id = ?";
                PreparedStatement psDet = con.prepareStatement(sqlDet);
                psDet.setInt(1, compraId);
                ResultSet rsDet = psDet.executeQuery();

                while (rsDet.next()) {
                    modelo.addRow(new Object[]{
                        rsDet.getString("prod_nombre"),
                        rsDet.getInt("det_comp_cantidad"),
                        rsDet.getDouble("prod_precio"),
                        rsDet.getDouble("subtotal")
                    });
                }
            } else {
                JOptionPane.showMessageDialog(null, "Factura de proveedor no encontrada.");
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al buscar factura: " + e.getMessage());
        }
    }//GEN-LAST:event_btnBuscarFacturaActionPerformed

    private void btnGuardarFactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarFactActionPerformed
        String proveedor = txtCedRuc.getText().trim();
        String numero = txtNumFac.getText().trim();
        String fecha = java.time.LocalDate.now().toString();

        double totalFactura;
        try {
            totalFactura = Double.parseDouble(txtTotalF.getText().replace(",", "."));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Formato numérico inválido en Total Final.");
            return;
        }

        try (Connection con = BD.conectar()) {
            con.setAutoCommit(false);

            // Obtener ID del proveedor
            String sqlProv = "SELECT prov_id FROM MUE_PROVEEDORES WHERE LOWER(prov_nombre) = LOWER(?)";
            PreparedStatement psProv = con.prepareStatement(sqlProv);
            psProv.setString(1, proveedor);
            ResultSet rsProv = psProv.executeQuery();
            int provId;
            if (rsProv.next()) {
                provId = rsProv.getInt("prov_id");
            } else {
                JOptionPane.showMessageDialog(null, "Proveedor no encontrado.");
                return;
            }

            // Insertar en MUE_RECEPCION_PROVEEDORES (cabecera de la factura de compra)
            String sqlCab = "INSERT INTO MUE_RECEPCION_PROVEEDORES (comp_id, comp_fecha, comp_numero, comp_total, comp_estado, prov_id) " +
                            "VALUES (comp_id_seq.NEXTVAL, TO_DATE(?, 'YYYY-MM-DD'), ?, ?, 'A', ?)";
            PreparedStatement psCab = con.prepareStatement(sqlCab, new String[]{"comp_id"});
            psCab.setString(1, fecha);
            psCab.setString(2, numero);
            psCab.setDouble(3, totalFactura);
            psCab.setInt(4, provId);
            psCab.executeUpdate();

            ResultSet rsCab = psCab.getGeneratedKeys();
            int compraId = 0;
            if (rsCab.next()) compraId = rsCab.getInt(1);

            // Insertar en MUE_DETALLES_COMPRAS y actualizar stock
            for (int i = 0; i < tblFact.getRowCount(); i++) {
                String prodNombre = tblFact.getValueAt(i, 0).toString();
                int cantidad = Integer.parseInt(tblFact.getValueAt(i, 1).toString());

                // Obtener ID del producto
                String sqlProd = "SELECT prod_id FROM MUE_PRODUCTOS WHERE LOWER(prod_nombre) = LOWER(?)";
                PreparedStatement psProd = con.prepareStatement(sqlProd);
                psProd.setString(1, prodNombre);
                ResultSet rsProd = psProd.executeQuery();
                int prodId = 0;
                if (rsProd.next()) prodId = rsProd.getInt("prod_id");

                // Insertar detalle de la compra
                String sqlDet = "INSERT INTO MUE_DETALLES_COMPRAS (det_comp_id, det_comp_cantidad, prod_id, comp_id) " +
                                "VALUES (det_comp_id_seq.NEXTVAL, ?, ?, ?)";
                PreparedStatement psDet = con.prepareStatement(sqlDet);
                psDet.setInt(1, cantidad);
                psDet.setInt(2, prodId);
                psDet.setInt(3, compraId);
                psDet.executeUpdate();

                // Actualizar stock (incrementar)
                String sqlStock = "UPDATE MUE_PRODUCTOS SET prod_stock = prod_stock + ? WHERE prod_id = ?";
                PreparedStatement psStock = con.prepareStatement(sqlStock);
                psStock.setInt(1, cantidad);
                psStock.setInt(2, prodId);
                psStock.executeUpdate();
            }

            con.commit();
            JOptionPane.showMessageDialog(null, "Factura de proveedor guardada correctamente.");
            txtTotalF.setText("");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al guardar factura: " + e.getMessage());
        }
    }//GEN-LAST:event_btnGuardarFactActionPerformed

    private void exitTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitTxtMouseClicked
        Dashboard dashboard = new Dashboard("A"); // o el permiso real que corresponda
        dashboard.setLocationRelativeTo(null);
        dashboard.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_exitTxtMouseClicked

    private void exitTxtMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitTxtMouseEntered
        exitBtn.setBackground(Color.red);
        exitTxt.setForeground(Color.white);
    }//GEN-LAST:event_exitTxtMouseEntered

    private void exitTxtMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitTxtMouseExited
        exitBtn.setBackground(Color.white);
        exitTxt.setForeground(Color.black);
    }//GEN-LAST:event_exitTxtMouseExited

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarProd1;
    private javax.swing.JButton btnAnularfactura;
    private javax.swing.JButton btnBuscarFactura;
    private javax.swing.JButton btnEliminarProd;
    private javax.swing.JButton btnGuardarFact;
    private javax.swing.JPanel exitBtn;
    private javax.swing.JLabel exitTxt;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lblCrearProd11;
    private javax.swing.JLabel lblCrearProd12;
    private javax.swing.JLabel lblCrearProd6;
    private javax.swing.JLabel lblCrearProd7;
    private javax.swing.JLabel lblCrearProd8;
    private javax.swing.JLabel lblCrearProd9;
    private javax.swing.JLabel lblMateriales1;
    private javax.swing.JTable tblFact;
    private javax.swing.JTextField txtCedRuc;
    private javax.swing.JTextField txtFechaFac;
    private javax.swing.JTextField txtNumFac;
    private javax.swing.JTextField txtProductoFact;
    private javax.swing.JTextField txtTotalF;
    // End of variables declaration//GEN-END:variables
}
